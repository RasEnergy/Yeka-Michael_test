// model Branch {
//   id        String   @id @default(cuid())
//   name      String
//   code      String   @unique
//   address   String?
//   phone     String?
//   email     String?
//   schoolId  String
//   isActive  Boolean  @default(true)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   school        School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
//   users         User[]
//   classes       Class[]
//   students      Student[]
//   enrollments   Enrollment[]
//   invoices      Invoice[]
//   payments      Payment[]
//   registrations Registration[]

//   @@map("branches")
// }

// enum UserRole {
//   SUPER_ADMIN
//   BRANCH_ADMIN
//   REGISTRAR
//   CASHIER
//   TEACHER
//   STUDENT
//   PARENT
// }


// enum StudentType {
//   REGULAR_STUDENT
//   NEW_STUDENT
// }

// enum RegistrationStatus {
//   PENDING_PAYMENT
//   PAYMENT_COMPLETED
//   ENROLLED
//   CANCELLED
// }

// enum PaymentOption {
//   REGISTRATION_MONTHLY
//   REGISTRATION_QUARTERLY
// }

// model User {
//   id        String    @id @default(cuid())
//   email     String    @unique
//   password  String
//   firstName String
//   lastName  String
//   phone     String?   @unique
//   avatar    String?
//   role      UserRole
//   schoolId  String
//   branchId  String?
//   isActive  Boolean   @default(true)
//   lastLogin DateTime?
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt

//   school School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
//   branch Branch? @relation(fields: [branchId], references: [id], onDelete: SetNull)

//   // Relations based on role
//   teacherProfile Teacher?
//   studentProfile Student?
//   parentProfile  Parent?

//   createdInvoices Invoice[] @relation("InvoiceCreatedBy")
//   Payment         Payment[] @relation("PaymentProcessedBy")

//   @@map("users")
// }


// model Student {
//   id               String      @id @default(cuid())
//   userId           String      @unique
//   studentId        String      @unique
//   branchId         String
//   studentType      StudentType @default(NEW_STUDENT)
//   gradeId         String?
//   // classId         String?
//   admissionDate    DateTime?
//   dateOfBirth      DateTime?
//   placeOfBirth     String?
//   gender           Gender?
//   nationality      String?
//   bloodGroup       String?
//   address          String?
//   emergencyContact String?
//   photo            String?
//   isActive         Boolean     @default(true)
//   createdAt        DateTime    @default(now())
//   updatedAt        DateTime    @updatedAt

//   user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
//   branch       Branch          @relation(fields: [branchId], references: [id], onDelete: Cascade)
//   registration Registration?
//   enrollments  Enrollment[]
//   invoices     Invoice[]
//   payments     Payment[]
//   parents      StudentParent[]
//   Grade        Grade[]

//   @@map("students")
// }


// model Parent {
//   id         String   @id @default(cuid())
//   userId     String   @unique
//   occupation String?
//   workplace  String?
//   address    String?
//   photo      String?
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt

//   user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
//   children StudentParent[]

//   @@map("parents")
// }

// model StudentParent {
//   id           String @id @default(cuid())
//   studentId    String
//   parentId     String
//   relationship String // father, mother, guardian

//   student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
//   parent  Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)

//   @@unique([studentId, parentId])
//   @@map("student_parents")
// }